# ------------------------------------------------------------------------------
# Makefile to build the CT-Binarization
#
# Author:    Johannes Gebert - HLRS - NUM - gebert@hlrs.de
# Date:      02.01.2022
# Last edit: 27.02.2022
#
# For use of make visit: https://www.gnu.org/software/make/
# ------------------------------------------------------------------------------
bin_name="cbi"
long_name="CT-Binarization"
# ------------------------------------------------------------------------------
ifeq ($(PROVIDES_GIT),YES)
# Get git hash https://jblevins.org/log/vc
# rev = $(shell git describe --tags --always)
	rev = $(shell git rev-parse HEAD)
	trgt_vrsn = $(shell git describe --tags --abbrev=0 | tee .version)
else
	rev = NO_GIT_REPOSITORY
	trgt_vrsn = $(shell cat .version)
endif
# -----------------------------------------------------------------------------
# Check for environment
check-env:
ifeq ($(SYS_ENV),)
	@echo "-----------------------------------------------"
	@echo "-- Please source environment.sh <system> first."
	@echo "-----------------------------------------------"
else
	@echo "-----------------------------------------------"
	@echo "-- Environment to build for: "$(SYS_ENV)
	@echo "-----------------------------------------------"
	$(MAKE) all
endif
# ------------------------------------------------------------------------------
# Build path
build_path = $(CURDIR)
export build_path
#
# ------------------------------------------------------------------------------
# Directories 
# st: "Subtree" - A git procedure to inherit another repository as some sort of
# submodule. https://gist.github.com/SKempin/b7857a6ff6bddb05717cc17a44091202
st_path= $(build_path)/geb-lib
#
st_obj_dir = $(st_path)/obj/
st_mod_dir = $(st_path)/mod/
st_f_src_dir = $(st_path)/f-src/
#
mod_dir   = $(build_path)/mod/
obj_dir   = $(build_path)/obj/
lib_dir   = $(build_path)/lib/
bin_dir   = $(build_path)/bin/
f_src_dir = $(build_path)/f-src/
ext_f-src = $(build_path)/f-src/ext-src_
#
# Directory for documentation
doc_dir  = $(build_path)/doc/
html_dir = $(build_path)/html/
tex_dir  = $(build_path)/latex/
#
# ------------------------------------------------------------------------------
# File extensions and suffixes
mod_ext = .mod
obj_ext = .o
sho_ext = .so
f90_ext = .f90
bin_suf = _x86_64
# ------------------------------------------------------------------------------
clean_cmd = rm -f
# ------------------------------------------------------------------------------
#
# Inlcude build options
include $(st_path)/make.flags
#
# ------------------------------------------------------------------------------
# Executable
main_bin = $(bin_dir)$(bin_name)_$(trgt_vrsn)$(bin_suf)
# ------------------------------------------------------------------------------
# Generate objects
#
f-objects = $(st_obj_dir)mod_global_std$(obj_ext)\
			$(st_obj_dir)mod_strings$(obj_ext)\
			$(st_obj_dir)mod_user_interaction$(obj_ext) \
			$(st_obj_dir)mod_meta$(obj_ext) \
			$(st_obj_dir)mod_vtk_raw$(obj_ext)\
			$(st_obj_dir)mod_formatted_plain$(obj_ext)\
			$(st_obj_dir)mod_math$(obj_ext)\
			$(obj_dir)ct_binarization$(obj_ext)

# ------------------------------------------------------------------------------
# Build the st directory first
st: 
	$(MAKE) all -C $(st_path)
	@echo 

# ------------------------------------------------------------------------------
# Begin Building
all: st $(main_bin)  

# --------------------------------------------------------------------------------------------------
# Main object
$(obj_dir)ct_binarization$(obj_ext):$(st_mod_dir)global_std$(mod_ext) $(st_mod_dir)raw_binary$(mod_ext)\
						 $(st_mod_dir)vtk_meta_data$(mod_ext)\
						 $(f_src_dir)ct_binarization$(f90_ext)
	@echo "-- Compiles: " $(f_src_dir)ct_binarization$(f90_ext)" -----"
	$(f90_compiler) $(c_flags_f90) -c $(f_src_dir)ct_binarization$(f90_ext) -o $@
	@echo

# --------------------------------------------------------------------------------------------------
# Export revision
export_revision:
	@echo "----------------------------------------------------------------------------------"
	@echo '-- Write revision and git info'
	@echo "CHARACTER(LEN=scl), PARAMETER :: longname = '$(long_name)'" > $(st_f_src_dir)include_f90/revision_meta$(f90_ext)
	@echo "CHARACTER(LEN=scl), PARAMETER :: hash = '$(rev)'" >> $(st_f_src_dir)include_f90/revision_meta$(f90_ext)
	@echo "----------------------------------------------------------------------------------"

# -----------------------------------------------------------------------------
# Final Link step of MAIN
$(main_bin): export_revision $(f-objects)
	@echo "----------------------------------------------------------------------------------"
	@echo '-- Final link step of $(long_name) executable'
	@echo "----------------------------------------------------------------------------------"
	$(f90_compiler) $(f-objects) -o $(main_bin)
	@echo
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Successfully build all."
	@echo "----------------------------------------------------------------------------------"

help:
	@echo "----------------------------------------------------------------------------------"
	@echo "-- $(long_name) make targets"
	@echo "-- Regular:  »make (all)«    - Build the $(long_name)"
	@echo "-- Cleaning: »make clean«    - Remove build files, keep the geb-lib"
	@echo "-- Cleaning: »make cleanall« - Remove all build files."
	@echo "-- Docs:     »make docs      - Build the html and the tex documentation."
	@echo "----------------------------------------------------------------------------------"

docs: 
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Beginn buiding the documentation of the $(long_name)."
	@echo "----------------------------------------------------------------------------------"
	doxygen doc/doxy.conf
	$(MAKE) pdf -C $(tex_dir)  
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Successfully build the documentation of the $(long_name)."
	@echo "----------------------------------------------------------------------------------"

cleandocs:
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning html documentation"
	@echo "----------------------------------------------------------------------------------"
	$(clean_cmd) $(html_dir)/*
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning tex documentation"
	@echo "----------------------------------------------------------------------------------"
	$(clean_cmd) $(tex_dir)/*
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Documentation removed."
	@echo "----------------------------------------------------------------------------------"
	
clean:
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning module directory"
	@echo "----------------------------------------------------------------------------------"
	$(clean_cmd) $(mod_dir)*$(mod_ext)
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning object directory"
	@echo "----------------------------------------------------------------------------------"
	$(clean_cmd) $(obj_dir)*$(obj_ext)
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning MAIN binary"
	@echo "----------------------------------------------------------------------------------"
	$(clean_cmd) $(main_bin)
	
cleanall: clean
	@echo "----------------------------------------------------------------------------------"
	@echo "-- Cleaning geb-lib st"
	@echo "----------------------------------------------------------------------------------"
	$(MAKE) clean -C $(st_path)